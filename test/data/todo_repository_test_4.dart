import 'package:flutter_test/flutter_test.dart';

void main() {
  setUpAll(
      () => print('setUpAll можно использовать для инициализации зависимостей, '
          'которая будет выполнена ровно один раз на весь набор тестов'));

  tearDownAll(() => print('tearDownAll можно использовать для уборки за собой, '
      'которая будет выполнена ровно один раз после выполнения всех тестов'));

  setUp(() => print('setUp можно использовать для инициализации зависимостей, '
      'которая будет выполнена каждый раз перед запуском любого из тестов'));

  tearDown(() => print(
      'tearDown можно использовать для очистки ресурсов и промежуточных результатов, '
      'которая будет выполнена каждый раз после выполнения любого из тестов'));

  group('TodoRepository', () {
    test('и его метод fetchAll должен вернуть таски в упорядоченном порядке',
        () {});

    group('и его метод create', () {
      test('должен создать новую задачу со следующим Id в списке ', () {});

      test('после создания задачи должен поместить ее в хранилище ', () {});
    });

    group('и его метод removeById ', () {
      test('после удаления задачи должен удалить ее из хранилища ', () {});

      test('при указании несуществующей задачи должен упасть с исключением',
          () {});
    });

    group('и его метод completeTodo', () {
      test('должен перевести задачу в состояние Completed', () {});

      test('при указании несуществующей задачи должен упасть с исключением',
          () {});
    });

    group('и его метод unCompleteTodo', () {
      test('должен восстановить задачу в незавершенное состояние', () {});

      test('при указании несуществующей задачи должен упасть с исключением',
          () {});
    });
  });
}
